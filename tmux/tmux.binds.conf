
unbind-key -a
##### Global keys like in Zellij (no prefix) #####
# bind -n C-h select-pane -L
# bind -n C-j select-pane -D
# bind -n C-k select-pane -U
# bind -n C-l select-pane -R



# Smart pane switching with awareness of Vim splits.
vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l




# Modes
bind -n C-a switch-client -T pane_mode
bind -n C-w switch-client -T window_mode
bind -n C-x switch-client -T session_mode
bind -n C-M-n switch-client -T resize_mode
bind -n C-s copy-mode -e

# Alt-navigation through panels/tabs and layouts
unbind -n M-Up
unbind -n M-Down
unbind -n M-Left
unbind -n M-Right
bind -n M-Left if -F '#{pane_at_left}'  'previous-window' 'select-pane -L'
bind -n M-Right if -F '#{pane_at_right}' 'next-window'     'select-pane -R'
bind -n M-Down select-pane -D
bind -n M-Up select-pane -U
bind -n M-[ select-layout -p
bind -n M-] select-layout -n
unbind -n n
bind -n M-n split-window -v


##### Pane mode (Zellij: Pane) #####
# Move between panels and quick actions, then exit to NORMAL
bind -T pane_mode h select-pane -L \; switch-client -T root
bind -T pane_mode j select-pane -D \; switch-client -T root
bind -T pane_mode k select-pane -U \; switch-client -T root
bind -T pane_mode l select-pane -R \; switch-client -T root
bind -T pane_mode p last-pane \; switch-client -T root
bind -T pane_mode o select-pane -t + \; switch-client -T root
bind -T pane_mode n split-window -h \; switch-client -T root
bind -T pane_mode v split-window -v \; switch-client -T root
bind -T pane_mode x kill-pane \; switch-client -T root
bind -T pane_mode z resize-pane -Z \; switch-client -T root


# Broadcast input (Sync panes)
bind -T pane_mode S set -w synchronize-panes \; display-message "Sync: #{?window_sync,ON,OFF}" \; switch-client -T root


# Toggle pane frames (как TogglePaneFrames)
unbind -T pane_mode f
set -g @pane_frames off
# bind -T pane_mode f if -F '#{==:#{@pane_frames},on}' 'set -g @pane_frames off' 'set -g @pane_frames on'
bind -T pane_mode f {
  if -F '#{==:#{@pane_frames},on}' {
    set -g @pane_frames off
  } {
    set -g @pane_frames on
  }
}



# # "Floating": popup as a surrogate
# bind -T pane_mode w run-shell "$XDG_CONFIG_HOME/tmux/scripts/popup.sh" #TODO:fix the damn bug with PATH
bind -T pane_mode e display-message "No floating panes in tmux" \; switch-client -T root

# MovePane: select a target and swap
unbind -T pane_mode t
bind -T pane_mode t display-panes -d 0 'swap-pane -s ! -t "%%" \; switch-client -T root'


##### Window (Tab) mode #####
bind -T window_mode r command-prompt -I "#W" { rename-window "%%" }
bind -T window_mode h previous-window \; switch-client -T root
bind -T window_mode k previous-window \; switch-client -T root
bind -T window_mode Up previous-window \; switch-client -T root
bind -T window_mode l next-window \; switch-client -T root
bind -T window_mode j next-window \; switch-client -T root
bind -T window_mode Down next-window \; switch-client -T root
bind -T window_mode n new-window \; switch-client -T root
bind -T window_mode x kill-window \; switch-client -T root
bind -T window_mode s set -w synchronize-panes \; display-message "Sync: #{?window_sync,ON,OFF}" \; switch-client -T root
bind -T window_mode a last-window \; switch-client -T root

# BreakPane / BreakPaneRight / BreakPaneLeft
bind -T window_mode b break-pane \; switch-client -T root
bind -T window_mode ']' break-pane \; swap-window -t +1 \; select-window -t +1 \; switch-client -T root
bind -T window_mode '[' break-pane \; swap-window -t -1 \; select-window -t -1 \; switch-client -T root

# Quick selection of tabs 1..9
bind -T window_mode 1 select-window -t 1 \; switch-client -T root
bind -T window_mode 2 select-window -t 2 \; switch-client -T root
bind -T window_mode 3 select-window -t 3 \; switch-client -T root
bind -T window_mode 4 select-window -t 4 \; switch-client -T root
bind -T window_mode 5 select-window -t 5 \; switch-client -T root
bind -T window_mode 6 select-window -t 6 \; switch-client -T root
bind -T window_mode 7 select-window -t 7 \; switch-client -T root
bind -T window_mode 8 select-window -t 8 \; switch-client -T root
bind -T window_mode 9 select-window -t 9 \; switch-client -T root


##### Resize mode #####
bind -r -T resize_mode h resize-pane -L 3
bind -r -T resize_mode j resize-pane -D 3
bind -r -T resize_mode k resize-pane -U 3
bind -r -T resize_mode l resize-pane -R 3
bind -r -T resize_mode H resize-pane -L 10
bind -r -T resize_mode J resize-pane -D 10
bind -r -T resize_mode K resize-pane -U 10
bind -r -T resize_mode L resize-pane -R 10
bind -r -T resize_mode = select-layout even-horizontal
bind -T resize_mode + select-layout even-vertical
bind -T resize_mode z resize-pane -Z


##### Session mode #####
bind -T session_mode d detach-client
bind -T session_mode w choose-tree -sZ
bind -T session_mode s choose-window -Z
unbind-key -T root :
unbind-key -T root c
bind -T session_mode : command-prompt \; switch-client -T root
bind -T session_mode c customize-mode -Z \; switch-client -T root

# "DumpScreen": save window layouts
unbind -T session_mode f
bind -T session_mode f run-shell -b 'tmux list-windows -a -F "#{session_name}:#{window_index} #{window_name} #{window_layout}" > "$HOME/IMPORTANT/tmux-layout.txt"' \; display-message 'Saved: ~/IMPORTANT/tmux-layout.txt'



##### Copy/Scroll (copy-mode-vi ≈ Zellij Scroll/Search) #####
bind -T copy-mode-vi G send -X end-of-buffer
bind -T copy-mode-vi j send -X cursor-down
bind -T copy-mode-vi k send -X cursor-up
bind -T copy-mode-vi C-f send -X page-down
bind -T copy-mode-vi C-b send -X page-up
bind -T copy-mode-vi l send -X page-down
bind -T copy-mode-vi h send -X page-up
bind -T copy-mode-vi d send -X halfpage-down
bind -T copy-mode-vi u send -X halfpage-up
bind -T copy-mode-vi s command-prompt -I "" -p "Search:" 'send -X search-forward "%%"'
bind -T copy-mode-vi n send -X search-next
bind -T copy-mode-vi p send -X search-previous
# Quickly view the buffer in a popup using less
bind -T copy-mode-vi e display-popup -E "/bin/zsh -c 'tmux capture-pane -pS -5000 | less'"



# Simple “command palette”
bind -n C-f display-menu -T '#[align=centre]Commands' \
  'Split ▮'        v  'split-window -v' \
  'Split ▯'        n  'split-window -h' \
  'Toggle Sync'    s  'set -w synchronize-panes \; display-message "Sync: #{?window_sync,ON,OFF}"' \
  'Choose Window'  w  'choose-window -Z' \
  'Choose Session' S  'choose-tree -sZ' \
  'Rename Window'  r  'command-prompt -I "#W" { rename-window "%%" }' \
  'Rename Session' R  'command-prompt -I "#S" { rename-session "%%" }' \
  'New Window'     N  'new-window' \
  'Kill Pane'      x  'kill-pane' \
  'Kill Window'    X  'kill-window' \
  'list-keys'      ?  'run-shell "$XDG_CONFIG_HOME/tmux/scripts/popup-clue.sh"'\

# Clue
bind -T pane_mode    '?' "run-shell '$XDG_CONFIG_HOME/tmux/scripts/popup-clue-pane.sh'"
bind -T window_mode  '?' run-shell '$XDG_CONFIG_HOME/tmux/scripts/popup-clue-window.sh'
bind -T resize_mode  '?' run-shell '$XDG_CONFIG_HOME/tmux/scripts/popup-clue-resize.sh'
bind -T session_mode '?' run-shell '$XDG_CONFIG_HOME/tmux/scripts/popup-clue-session.sh'



